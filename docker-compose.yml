# docker-compose file for running paperless from the docker container registry.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8000.
#
# In addition to that, this docker-compose file adds the following optional
# configurations:
#
# - Instead of SQLite (default), PostgreSQL is used as the database server.
# - Apache Tika and Gotenberg servers are started with paperless and paperless
#   is configured to use these services. These provide support for consuming
#   Office documents (Word, Excel, Power Point and their LibreOffice counter-
#   parts.
#
# To install and update paperless with this file, do the following:
#
# - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'
#   and '.env' into a folder.
# - Run 'docker-compose pull'.
# - Run 'docker-compose run --rm webserver createsuperuser' to create a user.
# - Run 'docker-compose up -d'.
#
# For more extensive installation and update instructions, refer to the
# documentation.

version: "3.4"

# Volumes #####################################################################
volumes:
  data:
    # external: true

  # Use this, if using bind mount
  # !! Note: Folder (device) needs to exist on the host! Create if it's not there.
  # data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: "${PWD}/data"

  media:
    # external: true

  # Use this, if using bind mount
  # !! Note: Folder (device) needs to exist on the host! Create if it's not there.
  # media:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: "${PWD}/media"

  # !! Note: Folder (device) needs to exist on the host! Create if it's not there.
  consume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${PWD}/consume"

  export:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${PWD}/export"

  pgdata:
  redisdata:
  caddy_data:

# Networks #####################################################################
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

# Services #####################################################################
services:
  # Caddy ---------------------------------------------------------------------
  caddy:
    image: caddy:alpine
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    environment:
      TLS_DOMAINS: "${TLS_DOMAINS:?TLS_DOMAINS not set}"
      ADMIN_EMAIL: "${ADMIN_EMAIL:?ADMIN_EMAIL not set}"
      TLS_INTERNAL: "${TLS_INTERNAL}"
    networks:
      - frontend
      - backend
    volumes:
      - caddy_data:/data
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile

  # Broker ---------------------------------------------------------------------
  broker:
    image: docker.io/library/redis:${REDIS_VERSION:?REDIS_VERSION not set}
    restart: unless-stopped
    volumes:
      - redisdata:/data
    networks:
      - backend

  # Postgres ------------------------------------------------------------------
  db:
    image: docker.io/library/postgres:${POSTGRES_VERSION:?POSTGRES_VERSION not set}
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
    networks:
      - backend

  # Paperless -----------------------------------------------------------------
  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:${PAPERLESS_NGX_VERSION:?PAPERLESS_NGX_VERSION not set}
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - db
      - broker
      - gotenberg
      - tika
    # ports:
    #   - "8000:8000"
    healthcheck:
      test:
        ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - data:/usr/src/paperless/data
      - media:/usr/src/paperless/media
      - export:/usr/src/paperless/export
      - consume:/usr/src/paperless/consume
    env_file: docker-compose.env
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998

  # Gotenberg -----------------------------------------------------------------
  gotenberg:
    image: docker.io/gotenberg/gotenberg:${GOTENBERG_VERSION:?GOTENBERG_VERSION not set}
    restart: unless-stopped
    networks:
      - backend
    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"

  # Tika ----------------------------------------------------------------------
  tika:
    networks:
      - backend
    image: ghcr.io/paperless-ngx/tika:${TKKA_VERSION:?TKKA_VERSION not set}
    restart: unless-stopped
